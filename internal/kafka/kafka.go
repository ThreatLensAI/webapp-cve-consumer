package kafka

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	env "github.com/csye7125-su24-team06/webapp-cve-consumer/internal"
	"github.com/csye7125-su24-team06/webapp-cve-consumer/internal/function"
	"github.com/segmentio/kafka-go"
)

type KafkaConsumerInterface interface {
	Consume()
	Close() error
}

type kafkaConsumer struct {
	client *kafka.Reader
}

var KafkaConsumerObject KafkaConsumerInterface

func GetKafkaConsumer() KafkaConsumerInterface {
	maxBytes, err := strconv.ParseFloat(env.GetEnvOrDefault("KAFKA_MAX_SIZE", "10e6"), 64)
	if err != nil {
		panic(fmt.Sprintf("Invalid Max Bytes : %v", err))
	}

	r := kafka.NewReader(kafka.ReaderConfig{
		Brokers:  strings.Split(env.GetEnvOrDefault("KAFKA_BROKER", "localhost:9092,localhost:9093,localhost:9094"), ","),
		GroupID:  env.GetEnvOrDefault("KAFKA_CONSUMER_GROUP_ID", "cve"),
		Topic:    env.GetEnvOrDefault("KAFKA_TOPIC", "cve"),
		MaxBytes: int(maxBytes),
	})

	KafkaConsumerObject = &kafkaConsumer{
		client: r,
	}

	return KafkaConsumerObject
}

func (kc *kafkaConsumer) Consume() {
	fmt.Println("Starting Kafka Consumer...")
	for {
		m, err := kc.client.FetchMessage(context.Background())
		if err != nil {
			panic(fmt.Sprintf("Kafka Client Faliure : %v", err))
		}

		function.ProcessCve(&m.Value)

		if err := kc.client.CommitMessages(context.Background(), m); err != nil {
			panic(fmt.Sprintf("Kafka Client Failed to commit message : %v", err))
		}
	}
}

func (kc *kafkaConsumer) Close() error {
	if err := kc.client.Close(); err != nil {
		return err
	}

	return nil
}
