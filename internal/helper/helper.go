package helper

import (
	"encoding/json"
	"log"
	"time"

	"github.com/csye7125-su24-team06/webapp-cve-consumer/internal/models"
)

func parseDatePublished(updated string, published string) (time.Time, error) {
	var dateUpdated time.Time
	if len(updated) == 0 {
		updated = published
	}

	timeLayouts := []string{
		"2006-01-02T15:04:05",
		"2006-01-02T15:04:05Z",
		"2006-01-02T15:04:05.000Z",
	}

	var timeParseErr error
	for _, layout := range timeLayouts {
		dateUpdated, timeParseErr = time.Parse(layout, updated)
		if timeParseErr == nil {
			break
		}
	}

	if timeParseErr != nil {
		log.Printf("Error Parsing Time : %v\n", timeParseErr)
		return time.Time{}, timeParseErr
	}

	return dateUpdated.UTC(), nil
}

type CveData struct {
	CveMetaData struct {
		Cve_id        string `json:"cveId"`
		DateUpdated   string `json:"dateUpdated"`
		DatePublished string `json:"datePublished"`
	} `json:"cveMetadata"`
}

// Custom CVE Json Parser
func Parse(data *[]byte) (*models.Cve, error) {
	var cveData CveData
	if err := json.Unmarshal(*data, &cveData); err != nil {
		return nil, err
	}

	dataPublished, err := parseDatePublished(cveData.CveMetaData.DateUpdated, cveData.CveMetaData.DatePublished)
	if err != nil {
		return nil, err
	}

	cve := models.Cve{
		Cve_id:      cveData.CveMetaData.Cve_id,
		DateUpdated: dataPublished,
		Data:        *data,
	}

	return &cve, nil
}
