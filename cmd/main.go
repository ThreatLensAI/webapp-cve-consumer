package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/csye7125-su24-team06/webapp-cve-consumer/internal/kafka"
	"github.com/csye7125-su24-team06/webapp-cve-consumer/pkg/database"
	"github.com/joho/godotenv"
)

func main() {
	gracefulShutdown()

	godotenv.Load()

	database.InitPostgres()

	kafkaConsumer := kafka.GetKafkaConsumer()
	kafkaConsumer.Consume()
}

func gracefulShutdown() {
	sigc := make(chan os.Signal, 1)
	signal.Notify(sigc,
		syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT)

	go func() {
		<-sigc

		fmt.Println("Disconnecting Database...")

		pgDB, err := database.DataSource.DB()
		if err != nil {
			fmt.Println("DB Object not found")
			os.Exit(0)
		}

		if err = pgDB.Ping(); err != nil {
			fmt.Println("DB Connection was not established")
			os.Exit(0)
		}

		if err = pgDB.Close(); err != nil {
			fmt.Println("DB Connection was not closed")
			os.Exit(0)
		}

		if err = kafka.KafkaConsumerObject.Close(); err != nil {
			fmt.Println("Kafka consumer close failure")
			os.Exit(0)
		}

		fmt.Println("Cleanup Completed!")
		os.Exit(0)
	}()
}
